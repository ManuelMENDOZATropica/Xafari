openapi: 3.0.3
info:
  title: Xafari REST API
  version: 1.0.0
  description: API for Xafari, a scavenger hunt game at Hotel Xcaret MÃ©xico.

servers:
  - url: https://api.xafari.mx/v1

paths:
  /users/{id}:
    get:
      summary: Get user profile
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Basic user info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /xelfies:
    get:
      summary: List available Xelfie points
      responses:
        '200':
          description: List of Xelfies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Xelfie'
        '500':
          $ref: '#/components/responses/InternalError'

  /user-xelfies/{userId}:
    get:
      summary: Get user's Xelfies
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User's Xelfies with status
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserXelfie'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /xperiencias:
    get:
      summary: List available Xperiencias
      responses:
        '200':
          description: List of Xperiencias
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Xperiencia'
        '500':
          $ref: '#/components/responses/InternalError'

  /user-activities/{userId}:
    get:
      summary: Get activity log for user
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Activity log
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserActivity'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /achievements:
    get:
      summary: List achievements
      parameters:
        - in: query
          name: type
          schema:
            type: string
            enum: [amulet, foliage]
      responses:
        '200':
          description: List of achievements
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Achievement'
        '500':
          $ref: '#/components/responses/InternalError'

  /user-achievements/{userId}:
    get:
      summary: Get user achievements
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Achievements earned by user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserAchievement'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /xecretos:
    get:
      summary: List Xecreto clues
      responses:
        '200':
          description: All Xecretos with status info
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Xecreto'
        '500':
          $ref: '#/components/responses/InternalError'

  /events:
    get:
      summary: List active events
      responses:
        '200':
          description: Events currently happening or upcoming
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '500':
          $ref: '#/components/responses/InternalError'

  /family-trees/{familyId}:
    get:
      summary: Get family tree info and member progress
      parameters:
        - in: path
          name: familyId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Family tree and status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FamilyTree'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

components:
  schemas:
    User:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        avatarUrl: { type: string }
        roomNumber: { type: string }

    Xelfie:
      type: object
      properties:
        id: { type: string }
        house: { type: string }
        coordinates: { type: string }

    UserXelfie:
      type: object
      properties:
        xelfieId: { type: string }
        takenAt: { type: string, format: date-time }
        downloadable: { type: boolean }

    Xperiencia:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        category: { type: string }
        validable: { type: boolean }

    UserActivity:
      type: object
      properties:
        activityId: { type: string }
        type: { type: string }
        metadata: { type: object }
        timestamp: { type: string, format: date-time }

    Achievement:
      type: object
      properties:
        id: { type: string }
        title: { type: string }
        type: { type: string }
        iconUrl: { type: string }
        house: { type: string }

    UserAchievement:
      type: object
      properties:
        achievementId: { type: string }
        earnedAt: { type: string, format: date-time }

    Xecreto:
      type: object
      properties:
        id: { type: string }
        house: { type: string }
        clueStage: { type: integer }
        found: { type: boolean }

    Event:
      type: object
      properties:
        id: { type: string }
        title: { type: string }
        startDate: { type: string, format: date-time }
        endDate: { type: string, format: date-time }

    FamilyTree:
      type: object
      properties:
        id: { type: string }
        adminId: { type: string }
        members:
          type: array
          items:
            type: object
            properties:
              userId: { type: string }
              progress: { type: object }

  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error: { type: string, example: 'Not Found' }
              message: { type: string, example: 'The requested resource was not found.' }

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              error: { type: string, example: 'Internal Server Error' }
              message: { type: string, example: 'Something went wrong on our end.' }

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            type: object
            properties:
              error: { type: string, example: 'Unauthorized' }
              message: { type: string, example: 'You must be logged in to access this resource.' }

    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            type: object
            properties:
              error: { type: string, example: 'Forbidden' }
              message: { type: string, example: 'You are not allowed to perform this action.' }

    ValidationError:
      description: Invalid input data
      content:
        application/json:
          schema:
            type: object
            properties:
              error: { type: string, example: 'Validation Error' }
              message: { type: string, example: 'One or more fields failed validation.' }
              details:
                type: array
                items:
                  type: object
                  properties:
                    field: { type: string }
                    issue: { type: string }
